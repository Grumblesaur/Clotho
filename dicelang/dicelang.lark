OP_ASSIGN: "="
OP_AUGMENT: "+=" | "-=" | "$=" | "*=" | "/=" | "//=" | "%=" | "**="
          | "<<=" | ">>=" | "&=" | "|=" | "^=" | "and=" | "or=" | "xor="

KW_IF: /\bif\b/
KW_THEN: /\bthen\b/
KW_ELSE: /\belse\b/
KW_DELETE: /\bdelete\b/
KW_WHILE: /\bwhile\b/
KW_DO: /\bdo\b/
KW_FOR: /\bfor\b/
KW_IN: /\bin\b/
KW_BY: /\bby\b/
KW_TO: /\bto\b/
KW_BREAK: /\bbreak\b/
KW_CONTINUE: /\bcontinue\b/
KW_RETURN: /\breturn\b/
KW_TERMINATE: /\bterminate\b/
KW_THROUGH: /\bthrough\b/ | /\bthru\b/
KW_BEGIN: /\bbegin\b/
KW_END: /\bend\b/
KW_MY: /\bmy\b/
KW_OUR: /\bour\b/
KW_PUB: /\bpublic\b/
KW_IS: /\bis\b/
KW_NOT: /\bnot\b/
identity_op: KW_IS | KW_IS KW_NOT

start: expr (";" expr)* ";"?

body: block | short
short: expr
block: KW_BEGIN expr (";" expr)* ";"? KW_END
conditional: KW_IF expr KW_THEN body -> if_block
           | KW_IF expr KW_THEN body KW_ELSE body -> if_else_block

iteration: KW_WHILE expr KW_DO body -> while_loop
         | KW_DO body KW_WHILE expr -> do_while_loop
         | KW_FOR identifier KW_IN expr KW_DO body -> for_loop

rvalue: expr
subscript_chain: subscript+
subscript: "[" slice "]" -> subscript_bracket
         | "." scoped_identifier -> subscript_dot

slice: expr -> index_or_key
     | ":" ":"? -> whole_slice
     | expr ":" ":"? -> start_slice
     | expr ":" ":" expr -> start_step_slice
     | expr ":" expr ":"? -> start_stop_slice
     | expr ":" expr ":" expr -> start_stop_step_slice
     | ":" expr ":"? -> stop_slice
     | ":" expr ":" expr -> stop_step_slice
     | ":" ":" expr -> step_slice



expr: assignment

deletion: KW_DELETE access ("," access)* ","?
assignment: lvalue OP_ASSIGN rvalue -> assignment_single
          | lvalue ("," lvalue)+ ","? OP_ASSIGN rvalue ("," rvalue)+ ","? -> assignment_multi
          | lvalue ("," lvalue)+ ","? OP_ASSIGN rvalue -> assignment_unpack
          | /\*/ lvalue ("," lvalue)+ ","? OP_ASSIGN rvalue -> assignment_unpack_left
          | (lvalue ",")+ /\*/ lvalue ("," lvalue)+ ","? OP_ASSIGN rvalue -> assignment_unpack_middle
          | (lvalue ",")+ /\*/ lvalue OP_ASSIGN rvalue -> assignment_unpack_right
          | deletion
          | augmented

augmented: lvalue OP_AUGMENT rvalue -> augmented_any
         | flow_control

flow_control: function
            | compound

compound: conditional
        | iteration
        | block
        | inline_if

function: "(" ((parameter ("," parameter)*)? ("," parameter_starred)? | parameter_starred) ","? ")" "->" body

parameter: IDENT
parameter_starred: /\*/ IDENT

inline_if: flow KW_IF flow KW_ELSE inline_if -> if_ternary
         | flow

flow: (KW_CONTINUE | KW_BREAK | KW_RETURN | KW_TERMINATE) repeat? -> keyword
    | repeat

repeat: repeat /\brepeat\b/ expr -> repetition
      | or

or: or "or" xor -> boolean_or
  | xor

xor: xor "xor" and -> boolean_xor
   | and

and: and "and" not -> boolean_and
   | not

not: KW_NOT comparison -> boolean_not
   | comparison

comparison: bitwise_or ((/>/|/</|/>=/|/<=/|/==/|/!=/) bitwise_and)+ -> compare_math
          | bitwise_or (identity_op bitwise_and)+ -> identity
          | bitwise_or KW_IN bitwise_and -> member_of
          | bitwise_or KW_NOT KW_IN bitwise_and -> member_of_negated
          | bitwise_or

bitwise_or: bitwise_or "|" bitwise_xor -> bit_or
          | bitwise_xor

bitwise_xor: bitwise_xor "^" bitwise_and -> bit_xor
           | bitwise_and

bitwise_and: bitwise_and "&" arithm -> bit_and
           | arithm

arithm: arithm "+" term -> addition
      | arithm "-" term -> subtraction
      | arithm "$" term -> catenation
      | term

term: term "*" factor -> multiplication
    | term "/" factor -> division
    | term "//" factor -> integer_division
    | term "%" factor -> remainder
    | term "<<" factor -> left_shift
    | term ">>" factor -> right_shift
    | factor

factor: "-" factor -> unary_minus
      | "+" factor -> unary_plus
      | "~" factor -> bit_not
      | power

power: special "**" factor -> exponent
     | special

special: "&" dice -> sum_or_join
       | special "!" dice -> coinflip
       | "@" dice -> random_selection_replacing_unary
       | special "@" dice -> random_selection_replacing_binary
       | "@!" dice -> random_selection_unary
       | special "@!" dice -> random_selection_binary
       | dice

dice: /d/ dice -> die_unary
    | dice /d/ primary -> die_binary
    | /r/ dice -> roll_unary
    | dice /r/ primary -> roll_binary
    | dice /r/ primary /h/ primary -> roll_ternary_high
    | dice /r/ primary /l/ primary -> roll_ternary_high
    | dice /d/ primary /h/ primary -> die_ternary_high
    | dice /d/ primary /l/ primary -> die_ternary_low
    | primary

primary: atom
       | primary subscript_chain -> retrieval_atomic
       | primary "(" arguments* ")" -> function_call
       | retrieval

access: identifier subscript_chain?
retrieval: access
lvalue: access

arguments: spread ("," spread)* ","?

atom: number
    | boolean
    | string
    | undefined
    | list
    | tuple
    | dict
    | set
    | "(" expr ")" -> priority

number: LIT_INT_DEC | LIT_INT_HEX | LIT_REAL | LIT_COMPLEX | LIT_NAN | LIT_INF
LIT_NAN: /\bnan\b/
LIT_INF: /\binf\b/

string: LIT_STRING_DOUBLE | LIT_STRING_SINGLE | LIT_RAW_SINGLE | LIT_RAW_DOUBLE
boolean: LIT_TRUE | LIT_FALSE
undefined: LIT_UNDEFINED
spread: "*" expr -> spread_unpackable
      | expr -> spread_single

list: "[" "]" -> list_empty
    | "[" spread ("," spread)* ","? "]" -> list_populated
    | "[" expr KW_TO expr "]" -> list_range
    | "[" expr KW_TO expr KW_BY expr "]" -> list_range_stepped
    | "[" expr KW_THROUGH expr "]" -> list_closed
    | "[" expr KW_THROUGH expr KW_BY expr "]" -> list_closed_stepped

tuple: "(" ")" -> tuple_empty
     | "(" spread "," ")" -> tuple_single
     | "(" spread ("," spread)+ ","? ")" -> tuple_multi
set: "{" spread ("," spread)* "}" -> set_populated

dict: "{" "}" -> dict_empty
    | "{" kv_pair ("," kv_pair)* ","? "}" -> dict_populated

kv_pair: expr ":" expr

IDENT: /(?!(public|my|our|delete|continue|break|return|terminate|for|while|do|if|else|repeat|in|and|or|not|begin|end|d|r|h|l|is|True|False|Undefined)\b)[a-zA-Z_]+[a-zA-Z0-9_]*/

scoped_identifier: IDENT
user_identifier: KW_MY IDENT
server_identifier: KW_OUR IDENT
public_identifier: KW_PUB IDENT
identifier: scoped_identifier
          | user_identifier
          | server_identifier
          | public_identifier

%import common.ESCAPED_STRING
%import common._STRING_ESC_INNER
%import common.NUMBER -> LIT_REAL
%import common.INT -> LIT_INT_DEC
%import common.HEXDIGIT
LIT_TRUE: /\bTrue\b/
LIT_FALSE: /\bFalse\b/
LIT_UNDEFINED: /\bUndefined\b/
LIT_COMPLEX: LIT_REAL ("j"|"J")
LIT_INT_HEX: "0x" HEXDIGIT+
LIT_STRING_SINGLE: "'" _STRING_ESC_INNER "'"
LIT_RAW_SINGLE: /\bR\b/ "'" _STRING_ESC_INNER "'"
LIT_RAW_DOUBLE: /\bR\b/ ESCAPED_STRING
LIT_STRING_DOUBLE: ESCAPED_STRING

%ignore "?" /.*/
%import common.WS
%import common.NEWLINE
%ignore WS
%ignore "`"


